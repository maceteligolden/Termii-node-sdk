{"version":3,"file":"termii-node-sdk.cjs.production.min.js","sources":["../src/constants/api.ts","../src/util/api.ts","../src/services/Messaging/SendBulkMessage.ts","../src/services/Messaging/SendMessage.ts","../src/controllers/Messaging/Messaging.ts","../src/index.ts"],"sourcesContent":["export const API_URL = 'https://api.ng.termii.com/api';\r\n","import axios from 'axios';\r\nimport { API_URL } from '../constants/api';\r\n\r\nexport const TermiiApi = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    }\r\n})\r\n\r\nexport const setSecretKey = async (secretKey: string) => {\r\n    try {\r\n        TermiiApi.defaults.headers.common['Authorization'] = `Bearer ${secretKey}`\r\n    } catch {\r\n        throw new Error('Error occurred when setting secret key')\r\n    }\r\n}","import { API_URL } from \"../../constants/api\"\r\nimport { setSecretKey, TermiiApi } from \"../../util/api\"\r\nimport { ISendBulkMessage } from \"../../interfaces/services/Messaging\"\r\n\r\nexport const sendBulkMessage = async (args: ISendBulkMessage) => {\r\n\r\n    //adding secret key to header\r\n    setSecretKey(args.secret_key)\r\n\r\n    const payload = {\r\n        \"api_key\": args.api_key, \r\n        \"to\": args.to,\r\n        \"from\": args.from,\r\n        \"sms\": args.sms,\r\n        \"type\": args.type,\r\n        \"channel\": args.channel,\r\n    }\r\n\r\n    const response = await TermiiApi.post(`${API_URL}/sms/send/bulk`, payload)\r\n\r\n    return response?.data\r\n}","import { API_URL } from \"../../constants/api\"\r\nimport { ISendMessage } from \"../../interfaces/services/Messaging\"\r\nimport { setSecretKey, TermiiApi } from \"../../util/api\"\r\n\r\nexport const sendMessage = async (args: ISendMessage) => {\r\n\r\n    //adding secret key to header\r\n    setSecretKey(args.secret_key)\r\n\r\n    const payload = {\r\n        \"api_key\": args.api_key, \r\n        \"to\": args.to,\r\n        \"from\": args.from,\r\n        \"sms\": args.sms,\r\n        \"type\": args.type,\r\n        \"channel\": args.channel,\r\n        \"media\": args.media,\r\n        \"media.url\": args[\"media.url\"],\r\n        \"media.caption\": args[\"media.caption\"]\r\n    }\r\n\r\n    const response = await TermiiApi.post(`${API_URL}/sms/send`, payload)\r\n\r\n    return response?.data\r\n}","import { IMessage } from \"../../interfaces/controllers/Messaging\"\r\nimport { ISendBulkPayload, ISendPayload} from \"../../interfaces/services/Messaging\"\r\nimport { sendBulkMessage } from \"../../services/Messaging/SendBulkMessage\"\r\nimport { sendMessage } from \"../../services/Messaging/SendMessage\"\r\n\r\n\r\nexport default class Messaging implements IMessage {\r\n\r\n    api_key: string;\r\n    secret_key: string;\r\n\r\n    constructor(api_key: string, secret_key: string){\r\n        this.api_key = api_key;\r\n        this.secret_key = secret_key;\r\n    }\r\n\r\n    async sendMessage(args: ISendPayload): Promise<any> {\r\n        try {\r\n            return await sendMessage({\r\n                ...args,\r\n                api_key: this.api_key,\r\n                secret_key: this.secret_key\r\n            })\r\n        } catch (err){\r\n            return err\r\n        }\r\n    }\r\n\r\n    async sendBulkMessage(args: ISendBulkPayload): Promise<any> {\r\n        try {\r\n            return await sendBulkMessage({\r\n                ...args,\r\n                api_key: this.api_key,\r\n                secret_key: this.secret_key\r\n            })\r\n        } catch (err){\r\n            return err\r\n        }\r\n    }\r\n}","import Messaging from \"./controllers/Messaging/Messaging\";\r\n\r\nclass Termii {\r\n\r\n    api_key: string;\r\n    secret_key: string;\r\n\r\n    Messaging: Messaging\r\n\r\n    constructor(api_key: string, secret_key: string){\r\n        this.api_key = api_key;\r\n        this.secret_key = secret_key;\r\n        this.Messaging = new Messaging(api_key, secret_key);\r\n    }\r\n}\r\n\r\nexport default Termii;"],"names":["API_URL","TermiiApi","axios","create","baseURL","headers","Content-Type","setSecretKey","secretKey","_context","defaults","common","Error","sendBulkMessage","args","secret_key","payload","api_key","to","from","sms","type","channel","post","response","data","sendMessage","media","media.url","media.caption","Messaging","this","_context2"],"mappings":"w+NAAO,IAAMA,EAAU,gCCGVC,EAAYC,EAAMC,OAAO,CAClCC,QAASJ,EACTK,QAAS,CACLC,eAAgB,sBAIXC,aAAY,kBAAG,WAAOC,GAAP,6BAAA,OAAA,sBAAA,OAAAC,SAEpBR,EAAUS,SAASL,QAAQM,OAA3B,wBAA+DH,EAF3CC,SAAA,MAAA,OAAA,MAAAA,SAAAA,gBAId,IAAIG,MAAM,0CAJI,OAAA,UAAA,uCAAH,mBAAA,mCCNZC,aAAe,kBAAG,WAAOC,GAAP,QAAA,6BAAA,OAAA,sBAAA,OAAA,OAG3BP,EAAaO,EAAKC,YAEZC,EAAU,CACZC,QAAWH,EAAKG,QAChBC,GAAMJ,EAAKI,GACXC,KAAQL,EAAKK,KACbC,IAAON,EAAKM,IACZC,KAAQP,EAAKO,KACbC,QAAWR,EAAKQ,SAXOb,SAcJR,EAAUsB,KAAQvB,mBAAyBgB,GAdvC,OAAA,gCAcrBQ,iBAECA,EAAUC,MAhBU,OAAA,UAAA,0BAAH,mBAAA,mCCAfC,aAAW,kBAAG,WAAOZ,GAAP,QAAA,6BAAA,OAAA,sBAAA,OAAA,OAGvBP,EAAaO,EAAKC,YAEZC,EAAU,CACZC,QAAWH,EAAKG,QAChBC,GAAMJ,EAAKI,GACXC,KAAQL,EAAKK,KACbC,IAAON,EAAKM,IACZC,KAAQP,EAAKO,KACbC,QAAWR,EAAKQ,QAChBK,MAASb,EAAKa,MACdC,YAAad,EAAK,aAClBe,gBAAiBf,EAAK,kBAdHL,SAiBAR,EAAUsB,KAAQvB,cAAoBgB,GAjBtC,OAAA,gCAiBjBQ,iBAECA,EAAUC,MAnBM,OAAA,UAAA,0BAAH,mBAAA,mCCEHK,aAKjB,WAAYb,EAAiBF,GACzBgB,KAAKd,QAAUA,EACfc,KAAKhB,WAAaA,6BAGhBW,yCAAN,WAAkBZ,GAAlB,6BAAA,OAAA,sBAAA,OAAA,OAAAL,SAAAA,SAEqBiB,OACNZ,GACHG,QAASc,KAAKd,QACdF,WAAYgB,KAAKhB,cAL7B,OAAA,iCAAA,OAAA,OAAAN,SAAAA,wCAAA,OAAA,UAAA,+FAYMI,6CAAN,WAAsBC,GAAtB,6BAAA,OAAA,sBAAA,OAAA,OAAAkB,SAAAA,SAEqBnB,OACNC,GACHG,QAASc,KAAKd,QACdF,WAAYgB,KAAKhB,cAL7B,OAAA,iCAAA,OAAA,OAAAiB,SAAAA,wCAAA,OAAA,UAAA,kHCnBA,SAAYf,EAAiBF,GACzBgB,KAAKd,QAAUA,EACfc,KAAKhB,WAAaA,EAClBgB,KAAKD,UAAY,IAAIA,EAAUb,EAASF"}